/*
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the \"License\").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef siphash_get_ctx_params_list
static const OSSL_PARAM siphash_get_ctx_params_list[] = {
    OSSL_PARAM_size_t(OSSL_MAC_PARAM_SIZE, NULL),
    OSSL_PARAM_uint(OSSL_MAC_PARAM_C_ROUNDS, NULL),
    OSSL_PARAM_uint(OSSL_MAC_PARAM_D_ROUNDS, NULL),
    OSSL_PARAM_END
};
#endif

#ifndef siphash_get_ctx_params_st
struct siphash_get_ctx_params_st {
    OSSL_PARAM *c;
    OSSL_PARAM *d;
    OSSL_PARAM *size;
};
#endif

#ifndef siphash_get_ctx_params_decoder
static int siphash_get_ctx_params_decoder
    (const OSSL_PARAM *p, struct siphash_get_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'c':
                if (ossl_likely(strcmp("-rounds", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_C_ROUNDS */
                    if (ossl_unlikely(r->c != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->c = (OSSL_PARAM *)p;
                }
                break;
            case 'd':
                if (ossl_likely(strcmp("-rounds", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_D_ROUNDS */
                    if (ossl_unlikely(r->d != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->d = (OSSL_PARAM *)p;
                }
                break;
            case 's':
                if (ossl_likely(strcmp("ize", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_SIZE */
                    if (ossl_unlikely(r->size != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->size = (OSSL_PARAM *)p;
                }
            }
    return 1;
}
#endif
/* End of machine generated */

/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef siphash_set_params_list
static const OSSL_PARAM siphash_set_params_list[] = {
    OSSL_PARAM_size_t(OSSL_MAC_PARAM_SIZE, NULL),
    OSSL_PARAM_octet_string(OSSL_MAC_PARAM_KEY, NULL, 0),
    OSSL_PARAM_uint(OSSL_MAC_PARAM_C_ROUNDS, NULL),
    OSSL_PARAM_uint(OSSL_MAC_PARAM_D_ROUNDS, NULL),
    OSSL_PARAM_END
};
#endif

#ifndef siphash_set_params_st
struct siphash_set_params_st {
    OSSL_PARAM *c;
    OSSL_PARAM *d;
    OSSL_PARAM *key;
    OSSL_PARAM *size;
};
#endif

#ifndef siphash_set_params_decoder
static int siphash_set_params_decoder
    (const OSSL_PARAM *p, struct siphash_set_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'c':
                if (ossl_likely(strcmp("-rounds", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_C_ROUNDS */
                    if (ossl_unlikely(r->c != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->c = (OSSL_PARAM *)p;
                }
                break;
            case 'd':
                if (ossl_likely(strcmp("-rounds", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_D_ROUNDS */
                    if (ossl_unlikely(r->d != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->d = (OSSL_PARAM *)p;
                }
                break;
            case 'k':
                if (ossl_likely(strcmp("ey", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_KEY */
                    if (ossl_unlikely(r->key != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->key = (OSSL_PARAM *)p;
                }
                break;
            case 's':
                if (ossl_likely(strcmp("ize", s + 1) == 0)) {
                    /* OSSL_MAC_PARAM_SIZE */
                    if (ossl_unlikely(r->size != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->size = (OSSL_PARAM *)p;
                }
            }
    return 1;
}
#endif
/* End of machine generated */
