/*
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the \"License\").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef ecdh_set_ctx_params_list
static const OSSL_PARAM ecdh_set_ctx_params_list[] = {
    OSSL_PARAM_int(OSSL_EXCHANGE_PARAM_EC_ECDH_COFACTOR_MODE, NULL),
    OSSL_PARAM_utf8_string(OSSL_EXCHANGE_PARAM_KDF_TYPE, NULL, 0),
    OSSL_PARAM_utf8_string(OSSL_EXCHANGE_PARAM_KDF_DIGEST, NULL, 0),
    OSSL_PARAM_utf8_string(OSSL_EXCHANGE_PARAM_KDF_DIGEST_PROPS, NULL, 0),
    OSSL_PARAM_size_t(OSSL_EXCHANGE_PARAM_KDF_OUTLEN, NULL),
    OSSL_PARAM_octet_string(OSSL_EXCHANGE_PARAM_KDF_UKM, NULL, 0),
# if defined(FIPS_MODULE)
    OSSL_PARAM_int(OSSL_EXCHANGE_PARAM_FIPS_KEY_CHECK, NULL),
# endif
# if defined(FIPS_MODULE)
    OSSL_PARAM_int(OSSL_EXCHANGE_PARAM_FIPS_DIGEST_CHECK, NULL),
# endif
# if defined(FIPS_MODULE)
    OSSL_PARAM_int(OSSL_EXCHANGE_PARAM_FIPS_ECDH_COFACTOR_CHECK, NULL),
# endif
    OSSL_PARAM_END
};
#endif

#ifndef ecdh_set_ctx_params_st
struct ecdh_set_ctx_params_st {
    OSSL_PARAM *digest;
# if defined(FIPS_MODULE)
    OSSL_PARAM *ind_cofac;
# endif
# if defined(FIPS_MODULE)
    OSSL_PARAM *ind_d;
# endif
# if defined(FIPS_MODULE)
    OSSL_PARAM *ind_k;
# endif
    OSSL_PARAM *kdf;
    OSSL_PARAM *len;
    OSSL_PARAM *mode;
    OSSL_PARAM *propq;
    OSSL_PARAM *ukm;
};
#endif

#ifndef ecdh_set_ctx_params_decoder
static int ecdh_set_ctx_params_decoder
    (const OSSL_PARAM *p, struct ecdh_set_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'd':
# if defined(FIPS_MODULE)
                if (ossl_likely(strcmp("igest-check", s + 1) == 0)) {
                    /* OSSL_EXCHANGE_PARAM_FIPS_DIGEST_CHECK */
                    if (ossl_unlikely(r->ind_d != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->ind_d = (OSSL_PARAM *)p;
                }
# endif
                break;
            case 'e':
                switch(s[1]) {
                default:
                    break;
                case 'c':
                    switch(s[2]) {
                    default:
                        break;
                    case 'd':
                        switch(s[3]) {
                        default:
                            break;
                        case 'h':
                            switch(s[4]) {
                            default:
                                break;
                            case '-':
                                switch(s[5]) {
                                default:
                                    break;
                                case 'c':
                                    switch(s[6]) {
                                    default:
                                        break;
                                    case 'o':
                                        switch(s[7]) {
                                        default:
                                            break;
                                        case 'f':
                                            switch(s[8]) {
                                            default:
                                                break;
                                            case 'a':
                                                switch(s[9]) {
                                                default:
                                                    break;
                                                case 'c':
                                                    switch(s[10]) {
                                                    default:
                                                        break;
                                                    case 't':
                                                        switch(s[11]) {
                                                        default:
                                                            break;
                                                        case 'o':
                                                            switch(s[12]) {
                                                            default:
                                                                break;
                                                            case 'r':
                                                                switch(s[13]) {
                                                                default:
                                                                    break;
                                                                case '-':
                                                                    switch(s[14]) {
                                                                    default:
                                                                        break;
                                                                    case 'c':
# if defined(FIPS_MODULE)
                                                                        if (ossl_likely(strcmp("heck", s + 15) == 0)) {
                                                                            /* OSSL_EXCHANGE_PARAM_FIPS_ECDH_COFACTOR_CHECK */
                                                                            if (ossl_unlikely(r->ind_cofac != NULL)) {
                                                                                ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                                                               "param %s is repeated", s);
                                                                                return 0;
                                                                            }
                                                                            r->ind_cofac = (OSSL_PARAM *)p;
                                                                        }
# endif
                                                                        break;
                                                                    case 'm':
                                                                        if (ossl_likely(strcmp("ode", s + 15) == 0)) {
                                                                            /* OSSL_EXCHANGE_PARAM_EC_ECDH_COFACTOR_MODE */
                                                                            if (ossl_unlikely(r->mode != NULL)) {
                                                                                ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                                                               "param %s is repeated", s);
                                                                                return 0;
                                                                            }
                                                                            r->mode = (OSSL_PARAM *)p;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case 'k':
                switch(s[1]) {
                default:
                    break;
                case 'd':
                    switch(s[2]) {
                    default:
                        break;
                    case 'f':
                        switch(s[3]) {
                        default:
                            break;
                        case '-':
                            switch(s[4]) {
                            default:
                                break;
                            case 'd':
                                switch(s[5]) {
                                default:
                                    break;
                                case 'i':
                                    switch(s[6]) {
                                    default:
                                        break;
                                    case 'g':
                                        switch(s[7]) {
                                        default:
                                            break;
                                        case 'e':
                                            switch(s[8]) {
                                            default:
                                                break;
                                            case 's':
                                                switch(s[9]) {
                                                default:
                                                    break;
                                                case 't':
                                                    switch(s[10]) {
                                                    default:
                                                        break;
                                                    case '-':
                                                        if (ossl_likely(strcmp("props", s + 11) == 0)) {
                                                            /* OSSL_EXCHANGE_PARAM_KDF_DIGEST_PROPS */
                                                            if (ossl_unlikely(r->propq != NULL)) {
                                                                ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                                               "param %s is repeated", s);
                                                                return 0;
                                                            }
                                                            r->propq = (OSSL_PARAM *)p;
                                                        }
                                                        break;
                                                    case '\0':
                                                        if (ossl_unlikely(r->digest != NULL)) {
                                                            ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                                           "param %s is repeated", s);
                                                            return 0;
                                                        }
                                                        r->digest = (OSSL_PARAM *)p;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 'o':
                                if (ossl_likely(strcmp("utlen", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_OUTLEN */
                                    if (ossl_unlikely(r->len != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->len = (OSSL_PARAM *)p;
                                }
                                break;
                            case 't':
                                if (ossl_likely(strcmp("ype", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_TYPE */
                                    if (ossl_unlikely(r->kdf != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->kdf = (OSSL_PARAM *)p;
                                }
                                break;
                            case 'u':
                                if (ossl_likely(strcmp("km", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_UKM */
                                    if (ossl_unlikely(r->ukm != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->ukm = (OSSL_PARAM *)p;
                                }
                            }
                        }
                    }
                    break;
                case 'e':
# if defined(FIPS_MODULE)
                    if (ossl_likely(strcmp("y-check", s + 2) == 0)) {
                        /* OSSL_EXCHANGE_PARAM_FIPS_KEY_CHECK */
                        if (ossl_unlikely(r->ind_k != NULL)) {
                            ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                           "param %s is repeated", s);
                            return 0;
                        }
                        r->ind_k = (OSSL_PARAM *)p;
                    }
# endif
                    break;
                }
                break;
            }
    return 1;
}
#endif
/* End of machine generated */

/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef ecdh_get_ctx_params_list
static const OSSL_PARAM ecdh_get_ctx_params_list[] = {
    OSSL_PARAM_int(OSSL_EXCHANGE_PARAM_EC_ECDH_COFACTOR_MODE, NULL),
    OSSL_PARAM_utf8_string(OSSL_EXCHANGE_PARAM_KDF_TYPE, NULL, 0),
    OSSL_PARAM_utf8_string(OSSL_EXCHANGE_PARAM_KDF_DIGEST, NULL, 0),
    OSSL_PARAM_size_t(OSSL_EXCHANGE_PARAM_KDF_OUTLEN, NULL),
    OSSL_PARAM_octet_ptr(OSSL_EXCHANGE_PARAM_KDF_UKM, NULL, 0),
# if defined(FIPS_MODULE)
    OSSL_PARAM_int(OSSL_ALG_PARAM_FIPS_APPROVED_INDICATOR, NULL),
# endif
    OSSL_PARAM_END
};
#endif

#ifndef ecdh_get_ctx_params_st
struct ecdh_get_ctx_params_st {
    OSSL_PARAM *digest;
# if defined(FIPS_MODULE)
    OSSL_PARAM *ind;
# endif
    OSSL_PARAM *kdf;
    OSSL_PARAM *len;
    OSSL_PARAM *mode;
    OSSL_PARAM *ukm;
};
#endif

#ifndef ecdh_get_ctx_params_decoder
static int ecdh_get_ctx_params_decoder
    (const OSSL_PARAM *p, struct ecdh_get_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'e':
                if (ossl_likely(strcmp("cdh-cofactor-mode", s + 1) == 0)) {
                    /* OSSL_EXCHANGE_PARAM_EC_ECDH_COFACTOR_MODE */
                    if (ossl_unlikely(r->mode != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->mode = (OSSL_PARAM *)p;
                }
                break;
            case 'f':
# if defined(FIPS_MODULE)
                if (ossl_likely(strcmp("ips-indicator", s + 1) == 0)) {
                    /* OSSL_ALG_PARAM_FIPS_APPROVED_INDICATOR */
                    if (ossl_unlikely(r->ind != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->ind = (OSSL_PARAM *)p;
                }
# endif
                break;
            case 'k':
                switch(s[1]) {
                default:
                    break;
                case 'd':
                    switch(s[2]) {
                    default:
                        break;
                    case 'f':
                        switch(s[3]) {
                        default:
                            break;
                        case '-':
                            switch(s[4]) {
                            default:
                                break;
                            case 'd':
                                if (ossl_likely(strcmp("igest", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_DIGEST */
                                    if (ossl_unlikely(r->digest != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->digest = (OSSL_PARAM *)p;
                                }
                                break;
                            case 'o':
                                if (ossl_likely(strcmp("utlen", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_OUTLEN */
                                    if (ossl_unlikely(r->len != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->len = (OSSL_PARAM *)p;
                                }
                                break;
                            case 't':
                                if (ossl_likely(strcmp("ype", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_TYPE */
                                    if (ossl_unlikely(r->kdf != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->kdf = (OSSL_PARAM *)p;
                                }
                                break;
                            case 'u':
                                if (ossl_likely(strcmp("km", s + 5) == 0)) {
                                    /* OSSL_EXCHANGE_PARAM_KDF_UKM */
                                    if (ossl_unlikely(r->ukm != NULL)) {
                                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                                       "param %s is repeated", s);
                                        return 0;
                                    }
                                    r->ukm = (OSSL_PARAM *)p;
                                }
                            }
                        }
                    }
                }
            }
    return 1;
}
#endif
/* End of machine generated */
