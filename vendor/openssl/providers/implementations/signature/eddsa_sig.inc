/*
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the \"License\").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef eddsa_get_ctx_params_list
static const OSSL_PARAM eddsa_get_ctx_params_list[] = {
    OSSL_PARAM_octet_string(OSSL_SIGNATURE_PARAM_ALGORITHM_ID, NULL, 0),
    OSSL_PARAM_END
};
#endif

#ifndef eddsa_get_ctx_params_st
struct eddsa_get_ctx_params_st {
    OSSL_PARAM *id;
};
#endif

#ifndef eddsa_get_ctx_params_decoder
static int eddsa_get_ctx_params_decoder
    (const OSSL_PARAM *p, struct eddsa_get_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            if (ossl_likely(strcmp("algorithm-id", s + 0) == 0)) {
                /* OSSL_SIGNATURE_PARAM_ALGORITHM_ID */
                if (ossl_unlikely(r->id != NULL)) {
                    ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                   "param %s is repeated", s);
                    return 0;
                }
                r->id = (OSSL_PARAM *)p;
            }
    return 1;
}
#endif
/* End of machine generated */

/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef eddsa_set_ctx_params_list
static const OSSL_PARAM eddsa_set_ctx_params_list[] = {
    OSSL_PARAM_utf8_string(OSSL_SIGNATURE_PARAM_INSTANCE, NULL, 0),
    OSSL_PARAM_octet_string(OSSL_SIGNATURE_PARAM_CONTEXT_STRING, NULL, 0),
    OSSL_PARAM_END
};
#endif

#ifndef eddsa_set_ctx_params_st
struct eddsa_set_ctx_params_st {
    OSSL_PARAM *ctx;
    OSSL_PARAM *inst;
};
#endif

#ifndef eddsa_set_ctx_params_decoder
static int eddsa_set_ctx_params_decoder
    (const OSSL_PARAM *p, struct eddsa_set_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'c':
                if (ossl_likely(strcmp("ontext-string", s + 1) == 0)) {
                    /* OSSL_SIGNATURE_PARAM_CONTEXT_STRING */
                    if (ossl_unlikely(r->ctx != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->ctx = (OSSL_PARAM *)p;
                }
                break;
            case 'i':
                if (ossl_likely(strcmp("nstance", s + 1) == 0)) {
                    /* OSSL_SIGNATURE_PARAM_INSTANCE */
                    if (ossl_unlikely(r->inst != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->inst = (OSSL_PARAM *)p;
                }
            }
    return 1;
}
#endif
/* End of machine generated */

/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef eddsa_set_variant_ctx_params_list
static const OSSL_PARAM eddsa_set_variant_ctx_params_list[] = {
    OSSL_PARAM_octet_string(OSSL_SIGNATURE_PARAM_CONTEXT_STRING, NULL, 0),
    OSSL_PARAM_END
};
#endif

#ifndef eddsa_set_variant_ctx_params_st
struct eddsa_set_variant_ctx_params_st {
    OSSL_PARAM *ctx;
};
#endif

#ifndef eddsa_set_variant_ctx_params_decoder
static int eddsa_set_variant_ctx_params_decoder
    (const OSSL_PARAM *p, struct eddsa_set_variant_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            if (ossl_likely(strcmp("context-string", s + 0) == 0)) {
                /* OSSL_SIGNATURE_PARAM_CONTEXT_STRING */
                if (ossl_unlikely(r->ctx != NULL)) {
                    ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                   "param %s is repeated", s);
                    return 0;
                }
                r->ctx = (OSSL_PARAM *)p;
            }
    return 1;
}
#endif
/* End of machine generated */
