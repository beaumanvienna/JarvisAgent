/*
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */


/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef file_set_ctx_params_list
static const OSSL_PARAM file_set_ctx_params_list[] = {
    OSSL_PARAM_utf8_string(OSSL_STORE_PARAM_PROPERTIES, NULL, 0),
    OSSL_PARAM_int(OSSL_STORE_PARAM_EXPECT, NULL),
    OSSL_PARAM_octet_string(OSSL_STORE_PARAM_SUBJECT, NULL, 0),
    OSSL_PARAM_utf8_string(OSSL_STORE_PARAM_INPUT_TYPE, NULL, 0),
    OSSL_PARAM_END
};
#endif

#ifndef file_set_ctx_params_st
struct file_set_ctx_params_st {
    OSSL_PARAM *expect;
    OSSL_PARAM *propq;
    OSSL_PARAM *sub;
    OSSL_PARAM *type;
};
#endif

#ifndef file_set_ctx_params_decoder
static int file_set_ctx_params_decoder
    (const OSSL_PARAM *p, struct file_set_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'e':
                if (ossl_likely(strcmp("xpect", s + 1) == 0)) {
                    /* OSSL_STORE_PARAM_EXPECT */
                    if (ossl_unlikely(r->expect != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->expect = (OSSL_PARAM *)p;
                }
                break;
            case 'i':
                if (ossl_likely(strcmp("nput-type", s + 1) == 0)) {
                    /* OSSL_STORE_PARAM_INPUT_TYPE */
                    if (ossl_unlikely(r->type != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->type = (OSSL_PARAM *)p;
                }
                break;
            case 'p':
                if (ossl_likely(strcmp("roperties", s + 1) == 0)) {
                    /* OSSL_STORE_PARAM_PROPERTIES */
                    if (ossl_unlikely(r->propq != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->propq = (OSSL_PARAM *)p;
                }
                break;
            case 's':
                if (ossl_likely(strcmp("ubject", s + 1) == 0)) {
                    /* OSSL_STORE_PARAM_SUBJECT */
                    if (ossl_unlikely(r->sub != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->sub = (OSSL_PARAM *)p;
                }
            }
    return 1;
}
#endif
/* End of machine generated */
