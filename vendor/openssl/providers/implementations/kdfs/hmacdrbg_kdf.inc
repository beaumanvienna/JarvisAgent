/*
 * Copyright 2025 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the \"License\").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef hmac_drbg_kdf_get_ctx_params_list
static const OSSL_PARAM hmac_drbg_kdf_get_ctx_params_list[] = {
    OSSL_PARAM_utf8_string(OSSL_KDF_PARAM_MAC, NULL, 0),
    OSSL_PARAM_utf8_string(OSSL_KDF_PARAM_DIGEST, NULL, 0),
    OSSL_PARAM_END
};
#endif

#ifndef hmac_drbg_kdf_get_ctx_params_st
struct hmac_drbg_kdf_get_ctx_params_st {
    OSSL_PARAM *digest;
    OSSL_PARAM *mac;
};
#endif

#ifndef hmac_drbg_kdf_get_ctx_params_decoder
static int hmac_drbg_kdf_get_ctx_params_decoder
    (const OSSL_PARAM *p, struct hmac_drbg_kdf_get_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'd':
                if (ossl_likely(strcmp("igest", s + 1) == 0)) {
                    /* OSSL_KDF_PARAM_DIGEST */
                    if (ossl_unlikely(r->digest != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->digest = (OSSL_PARAM *)p;
                }
                break;
            case 'm':
                if (ossl_likely(strcmp("ac", s + 1) == 0)) {
                    /* OSSL_KDF_PARAM_MAC */
                    if (ossl_unlikely(r->mac != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->mac = (OSSL_PARAM *)p;
                }
            }
    return 1;
}
#endif
/* End of machine generated */

/* Machine generated by util/perl/OpenSSL/paramnames.pm */
#ifndef hmac_drbg_kdf_set_ctx_params_list
static const OSSL_PARAM hmac_drbg_kdf_set_ctx_params_list[] = {
    OSSL_PARAM_utf8_string(OSSL_KDF_PARAM_PROPERTIES, NULL, 0),
    OSSL_PARAM_utf8_string(OSSL_KDF_PARAM_DIGEST, NULL, 0),
    OSSL_PARAM_octet_string(OSSL_KDF_PARAM_HMACDRBG_ENTROPY, NULL, 0),
    OSSL_PARAM_octet_string(OSSL_KDF_PARAM_HMACDRBG_NONCE, NULL, 0),
    OSSL_PARAM_END
};
#endif

#ifndef hmac_drbg_kdf_set_ctx_params_st
struct hmac_drbg_kdf_set_ctx_params_st {
    OSSL_PARAM *digest;
    OSSL_PARAM *engine;
    OSSL_PARAM *ent;
    OSSL_PARAM *nonce;
    OSSL_PARAM *propq;
};
#endif

#ifndef hmac_drbg_kdf_set_ctx_params_decoder
static int hmac_drbg_kdf_set_ctx_params_decoder
    (const OSSL_PARAM *p, struct hmac_drbg_kdf_set_ctx_params_st *r)
{
    const char *s;

    memset(r, 0, sizeof(*r));
    if (p != NULL)
        for (; (s = p->key) != NULL; p++)
            switch(s[0]) {
            default:
                break;
            case 'd':
                if (ossl_likely(strcmp("igest", s + 1) == 0)) {
                    /* OSSL_KDF_PARAM_DIGEST */
                    if (ossl_unlikely(r->digest != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->digest = (OSSL_PARAM *)p;
                }
                break;
            case 'e':
                switch(s[1]) {
                default:
                    break;
                case 'n':
                    switch(s[2]) {
                    default:
                        break;
                    case 'g':
                        if (ossl_likely(strcmp("ine", s + 3) == 0)) {
                            /* OSSL_ALG_PARAM_ENGINE */
                            if (ossl_unlikely(r->engine != NULL)) {
                                ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                               "param %s is repeated", s);
                                return 0;
                            }
                            r->engine = (OSSL_PARAM *)p;
                        }
                        break;
                    case 't':
                        if (ossl_likely(strcmp("ropy", s + 3) == 0)) {
                            /* OSSL_KDF_PARAM_HMACDRBG_ENTROPY */
                            if (ossl_unlikely(r->ent != NULL)) {
                                ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                               "param %s is repeated", s);
                                return 0;
                            }
                            r->ent = (OSSL_PARAM *)p;
                        }
                    }
                }
                break;
            case 'n':
                if (ossl_likely(strcmp("once", s + 1) == 0)) {
                    /* OSSL_KDF_PARAM_HMACDRBG_NONCE */
                    if (ossl_unlikely(r->nonce != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->nonce = (OSSL_PARAM *)p;
                }
                break;
            case 'p':
                if (ossl_likely(strcmp("roperties", s + 1) == 0)) {
                    /* OSSL_KDF_PARAM_PROPERTIES */
                    if (ossl_unlikely(r->propq != NULL)) {
                        ERR_raise_data(ERR_LIB_PROV, PROV_R_REPEATED_PARAMETER,
                                       "param %s is repeated", s);
                        return 0;
                    }
                    r->propq = (OSSL_PARAM *)p;
                }
            }
    return 1;
}
#endif
/* End of machine generated */
